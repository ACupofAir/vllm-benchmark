diff --git a/csrc/ktransformers_ext/cpu_backend/backend.cpp b/csrc/ktransformers_ext/cpu_backend/backend.cpp
index 7478d5c..d7f8c9b 100644
--- a/csrc/ktransformers_ext/cpu_backend/backend.cpp
+++ b/csrc/ktransformers_ext/cpu_backend/backend.cpp
@@ -27,10 +27,10 @@ Backend::Backend(int max_thread_num) {
         thread_state_[i].status =
             std::make_unique<std::atomic<ThreadStatus>>(ThreadStatus::WAITING);
     }
-    workers_.resize(max_thread_num_);
-    for (int i = 1; i < max_thread_num_; i++) {
-        workers_[i] = std::thread(&Backend::worker_thread, this, i);
-    }
+    //workers_.resize(max_thread_num_);
+    //for (int i = 1; i < max_thread_num_; i++) {
+    //    workers_[i] = std::thread(&Backend::worker_thread, this, i);
+    //}
 }
 
 Backend::~Backend() {
@@ -38,11 +38,11 @@ Backend::~Backend() {
         thread_state_[i].status->store(ThreadStatus::EXIT,
                                        std::memory_order_release);
     }
-    for (int i = 1; i < max_thread_num_; i++) {
-        if (workers_[i].joinable()) {
-            workers_[i].join();
-        }
-    }
+    //for (int i = 1; i < max_thread_num_; i++) {
+    //    if (workers_[i].joinable()) {
+    //        workers_[i].join();
+    //    }
+    //}
 }
 
 int Backend::get_thread_num() { return max_thread_num_; }
@@ -77,12 +77,19 @@ void Backend::do_work_stealing_job(int task_num,
     thread_state_[0].curr->store(0, std::memory_order_relaxed);
     thread_state_[0].status->store(ThreadStatus::WORKING,
                                    std::memory_order_release);
-    process_tasks(0);
-    for (int i = 1; i < thread_num_; i++) {
-        while (thread_state_[i].status->load(std::memory_order_acquire) ==
-               ThreadStatus::WORKING) {
-        }
-    }
+    //process_tasks(0);
+    //for (int i = 1; i < thread_num_; i++) {
+    //    while (thread_state_[i].status->load(std::memory_order_acquire) ==
+    //           ThreadStatus::WORKING) {
+	//    }
+	//}
+    #pragma omp parallel num_threads(thread_num_)
+	{
+			int tid = omp_get_thread_num();
+			// int cpu = sched_getcpu();  // tells you the core this thread is running on
+			// std::cout << "DEBUG=====Thread " << tid << " is running on CPU " << cpu << std::endl;
+			process_tasks(tid);
+	}
 }
 
 void Backend::process_tasks(int thread_id) {
@@ -132,23 +139,23 @@ void Backend::process_tasks(int thread_id) {
 void Backend::worker_thread(int thread_id) {
     auto start = std::chrono::steady_clock::now();
     thread_local_id = thread_id; // 设置线程本地变量
-    while (true) {
-        ThreadStatus status =
-            thread_state_[thread_id].status->load(std::memory_order_acquire);
-        if (status == ThreadStatus::WORKING) {
-            process_tasks(thread_id);
-            start = std::chrono::steady_clock::now();
-        } else if (status == ThreadStatus::WAITING) {
-            auto now = std::chrono::steady_clock::now();
-            auto duration =
-                std::chrono::duration_cast<std::chrono::milliseconds>(now -
-                                                                      start)
-                    .count();
-            if (duration > 50) {
-                std::this_thread::sleep_for(std::chrono::milliseconds(1));
-            }
-        } else if (status == ThreadStatus::EXIT) {
-            return;
-        }
-    }
-}
\ No newline at end of file
+    //while (true) {
+    //    ThreadStatus status =
+    //        thread_state_[thread_id].status->load(std::memory_order_acquire);
+    //    if (status == ThreadStatus::WORKING) {
+    //        process_tasks(thread_id);
+    //        start = std::chrono::steady_clock::now();
+    //    } else if (status == ThreadStatus::WAITING) {
+    //        auto now = std::chrono::steady_clock::now();
+    //        auto duration =
+    //            std::chrono::duration_cast<std::chrono::milliseconds>(now -
+    //                                                                  start)
+    //                .count();
+    //        if (duration > 50) {
+    //            std::this_thread::sleep_for(std::chrono::milliseconds(1));
+    //        }
+    //    } else if (status == ThreadStatus::EXIT) {
+    //        return;
+    //    }
+    //}
+}
diff --git a/csrc/ktransformers_ext/cpu_backend/backend.h b/csrc/ktransformers_ext/cpu_backend/backend.h
index 7a95f27..b898201 100644
--- a/csrc/ktransformers_ext/cpu_backend/backend.h
+++ b/csrc/ktransformers_ext/cpu_backend/backend.h
@@ -14,9 +14,11 @@
 #include <condition_variable>
 #include <cstdio>
 #include <functional>
+#include <iostream>
 #include <mutex>
-#include <thread>
+//#include <thread>
 #include <vector>
+#include <omp.h>
 
 enum ThreadStatus {
     WORKING,
@@ -50,9 +52,9 @@ class Backend {
     std::function<void(int)> init_func_;
     std::function<void(int)> compute_func_;
     std::function<void(int)> finalize_func_;
-    std::vector<std::thread> workers_;
+    //std::vector<std::thread> workers_;
 
     void process_tasks(int);
     void worker_thread(int);
 };
-#endif
\ No newline at end of file
+#endif
diff --git a/setup.py b/setup.py
index c91d9dc..a83c8f2 100644
--- a/setup.py
+++ b/setup.py
@@ -509,6 +509,8 @@ class CMakeBuild(BuildExtension):
             cmake_args += ["-DKTRANSFORMERS_USE_ROCM=ON"]
         elif KTRANSFORMERS_BUILD_XPU:
             cmake_args += ["-DKTRANSFORMERS_USE_XPU=ON", "-DKTRANSFORMERS_USE_CUDA=OFF"]
+            cmake_args += ["-DCMAKE_C_COMPILER=icx"]
+            cmake_args += ["-DCMAKE_CXX_COMPILER=icpx"]
         else:
             raise ValueError("Unsupported backend: CUDA_HOME, MUSA_HOME, and ROCM_HOME are not set and XPU is not available.")
         
diff --git a/third_party/llamafile/iqk_mul_mat.inc b/third_party/llamafile/iqk_mul_mat.inc
index a4e8c41..015aed7 100644
--- a/third_party/llamafile/iqk_mul_mat.inc
+++ b/third_party/llamafile/iqk_mul_mat.inc
@@ -78,8 +78,10 @@
 
 #endif
 
-constexpr ggml_type GGML_TYPE_Q8_0_X4 = static_cast<ggml_type>(98);
-constexpr ggml_type GGML_TYPE_Q8_1_X4 = static_cast<ggml_type>(99);
+//constexpr ggml_type GGML_TYPE_Q8_0_X4 = static_cast<ggml_type>(98);
+//constexpr ggml_type GGML_TYPE_Q8_1_X4 = static_cast<ggml_type>(99);
+constexpr int GGML_TYPE_Q8_0_X4 = 98;
+constexpr int GGML_TYPE_Q8_1_X4 = 99;
 
 
 namespace {
@@ -3249,7 +3251,7 @@ add GGML_TYPE_IQ4_XS
 bool MulMat::set_mul_mat(int typeA, int typeB, int ne00, MulMat& mm, int Ny) {
     (void)Ny;
 
-        auto expected_typeB = GGML_TYPE_Q8_K;
+        int expected_typeB = GGML_TYPE_Q8_K;
     switch (typeA) {
         case GGML_TYPE_Q2_K:
             assert (ne00 % QK_K == 0);
